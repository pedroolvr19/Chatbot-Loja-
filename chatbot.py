import random

class Chatbot:
    def __init__(self):
        self.produtos = [
            {
                "codigo": "1.1",
                "nome": "Notebook Dell Inspiron 15",
                "descricao": "Ideal para estudos e trabalho, com processador Intel i5, 8GB RAM, SSD 256GB",
                "preco": "R$ 3.000",
                "qualidade": "Alta performance para atividades di√°rias, constru√ß√£o resistente, tela Full HD.",
                "compatibilidade": "Compat√≠vel com impressoras Wi-Fi, mouses USB, monitores HDMI."
            },
            {
                "codigo": "1.2",
                "nome": "Fone de Ouvido JBL Tune 510BT",
                "descricao": "Fone Bluetooth com som potente e at√© 40h de bateria",
                "preco": "R$ 250",
                "qualidade": "Som limpo e com graves refor√ßados, ideal para uso di√°rio.",
                "compatibilidade": "Compat√≠vel com celulares, tablets e notebooks com Bluetooth."
            },
            {
                "codigo": "1.3",
                "nome": "Tablet Samsung Galaxy Tab A8",
                "descricao": "Tela de 10.5'', √≥timo para v√≠deos, leitura e apps educativos.",
                "preco": "R$ 1.800",
                "qualidade": "Boa performance para multim√≠dia e apps simples.",
                "compatibilidade": "Compat√≠vel com fones Bluetooth, canetas capacitivas e capas magn√©ticas."
            },
            {
                "codigo": "1.4",
                "nome": "Smartphone Motorola G73 5G",
                "descricao": "Celular com c√¢mera de 50MP, 5G, 128GB de mem√≥ria e 8GB RAM",
                "preco": "R$ 1.950",
                "qualidade": "Excelente desempenho para jogos e multitarefa, √≥tima c√¢mera.",
                "compatibilidade": "Compat√≠vel com fones Bluetooth, capinhas magn√©ticas, carregadores tipo C."
            },
            {
                "codigo": "1.5",
                "nome": "Smartwatch Amazfit Bip U Pro",
                "descricao": "Rel√≥gio inteligente com monitoramento de sa√∫de, GPS e 9 dias de bateria",
                "preco": "R$ 350",
                "qualidade": "Boa constru√ß√£o, bateria duradoura, recursos avan√ßados de sa√∫de.",
                "compatibilidade": "Compat√≠vel com Android e iOS via app Zepp."
            }
        ]
        self.estado = "menu"
        self.produto_atual = None
        self.estado_recomendacao = None

    def menu_opcoes(self):
        return (
            "\nüìã Menu de Op√ß√µes:\n"
            "1 - Ver produtos dispon√≠veis\n"
            "2 - Obter recomenda√ß√£o de produto\n"
            "3 - Falar com um atendente\n"
            "4 - Encerrar atendimento\n"
            "Digite o n√∫mero da op√ß√£o desejada:"
        )

    def responder(self, entrada):
        entrada = entrada.strip().lower()

        if self.estado_recomendacao:
            return self.processar_resposta_recomendacao(entrada)

        if self.estado == "produto":
            return self.dialogo_sobre_produto(entrada)

        if entrada == "1":
            return self.listar_produtos()

        elif entrada == "2":
            self.estado_recomendacao = "esperando_escolha"
            return self.perguntar_recomendacao()

        elif entrada == "3":
            return "Encaminhando para um atendente disponivel... Envie Mensagem com sua duvida,problema ou  quest√£o para o n√∫mero (81983685500)"

        elif entrada == "4":
            return "At√© mais! Foi um prazer te ajudar. üòä"

        else:
            return "Desculpe, n√£o entendi. Escolha uma op√ß√£o v√°lida do menu."

    def listar_produtos(self):
        resposta = "üõçÔ∏è Produtos dispon√≠veis:\n\n"
        for produto in self.produtos:
            resposta += (
                f"{produto['codigo']} - {produto['nome']}\n"
                f"    üìÑ {produto['descricao']}\n"
                f"    üí∞ {produto['preco']}\n\n"
            )
        resposta += "Digite o c√≥digo (ex: 1.1) para saber mais ou 'voltar' para retornar ao menu."
        self.estado = "produto"
        return resposta

    def dialogo_sobre_produto(self, entrada):
        if entrada == "voltar":
            self.estado = "menu"
            self.produto_atual = None
            return self.menu_opcoes()

        for p in self.produtos:
            if entrada == p["codigo"].lower():
                self.produto_atual = p
                return (
                    f"üßæ {p['nome']} selecionado.\n"
                    "Voc√™ pode perguntar:\n"
                    "- Qual a qualidade do produto?\n"
                    "- Ele √© compat√≠vel com outro item?\n"
                    "- Ou digite 'voltar' para retornar ao menu."
                )

        if self.produto_atual:
            if "qualidade" in entrada:
                return f"üìà Qualidade: {self.produto_atual['qualidade']}"
            elif "compat√≠vel" in entrada or "compatibilidade" in entrada:
                return f"üîå Compatibilidade: {self.produto_atual['compatibilidade']}"
            else:
                return (
                    "Desculpe, n√£o entendi a pergunta. "
                    "Tente perguntar sobre a qualidade ou compatibilidade, ou digite 'voltar'."
                )

        return "C√≥digo inv√°lido. Digite um c√≥digo como '1.1' ou 'voltar' para retornar."

    def perguntar_recomendacao(self):
        return (
            "üîç Para qual finalidade voc√™ est√° procurando um produto?\n"
            "a - Estudo e trabalho\n"
            "b - M√∫sica e entretenimento\n"
            "c - Mobilidade e comunica√ß√£o\n"
            "d - Monitoramento de sa√∫de\n"
            "Digite a letra correspondente (a, b, c ou d):"
        )

    def processar_resposta_recomendacao(self, entrada):
        self.estado_recomendacao = None

        if entrada == "a":
            produto = next((p for p in self.produtos if "notebook" in p["nome"].lower()), None)
        elif entrada == "b":
            produto = next((p for p in self.produtos if "fone" in p["nome"].lower()), None)
        elif entrada == "c":
            produto = next((p for p in self.produtos if "smartphone" in p["nome"].lower()), None)
        elif entrada == "d":
            produto = next((p for p in self.produtos if "smartwatch" in p["nome"].lower()), None)
        else:
            return "Op√ß√£o inv√°lida. Tente digitar a, b, c ou d."

        if produto:
            return (
                f"üéØ Recomenda√ß√£o baseada na sua escolha:\n"
                f"üî∏ {produto['nome']}\n"
                f"üìÑ {produto['descricao']}\n"
                f"üí∞ {produto['preco']}"
            )
        else:
            return "Desculpe, n√£o encontrei um produto adequado para essa finalidade."
